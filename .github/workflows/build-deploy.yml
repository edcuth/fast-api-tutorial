name: Build and Deploy Code

on: [push, pull_request]
# push:
#    branches: 
#      - "main"
#  pull_request:
#    branches:
#      - "test_branch"
# the reference tab in the github actions documentation covers this part

# declearing env vars outside a job makes them accesible for every job
# env:
#   - some_env: some_env_val
#   etc

jobs:

  job1:
    #this let's us use a specific predefined environment in our repo
    environment: 
      #like the testing env, in this case
      name: Testing
    # these env vars are job specific
    # to access env vars, you'll use ${{[envvar_name]}}
    env:
      #${{secrets.[envvar name]}} to access secrets
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABSE_PASSWORD: ${{secrets.DATABSE_PASSWORD}}
      # envvar from the testing env
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DATABSE_PASSWORD}}
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test 
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    steps:
      - name: Pulling git repository
        uses: actions/checkout@v2
      #-uses: sudo apt install python if we wanted to do it manually
      - name: Install Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - name: Update pip
        run: python -m pip install --upgrade pip
      - name: Install Dependencies
        run: pip install -r requirements.txt
      - name: Test with Pytest
        run: |
          pip install pytest
          pytest